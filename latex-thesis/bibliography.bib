@inproceedings{xu_how_well_static_2023,
	title = {How {Well} {Static} {Type} {Checkers} {Work} with {Gradual} {Typing}? {A} {Case} {Study} on {Python}},
	shorttitle = {How {Well} {Static} {Type} {Checkers} {Work} with {Gradual} {Typing}?},
	url = {https://ieeexplore.ieee.org/abstract/document/10173949},
	doi = {10.1109/ICPC58990.2023.00039},
	abstract = {Python has become increasingly popular and widely used in many fields. Dynamic features of Python provide much convenience for developers. However, they can also cause many type-related bugs undetected until runtime, which increases the cost of maintenance. Static type checking is essential to find bugs early, and the introduction of gradual typing and type annotations makes it easier to perform static type analysis. However, it remains to be investigated how well gradual typing improves real bug detection. Therefore, we conducted a comprehensive study on three widely used checkers: MyPy, PyRight, and PyType. We used a benchmark containing 10 popular Python projects with 40 real type-related bugs. First, we performed static type checking on the projects with and without type annotations to evaluate the effectiveness of finding real bugs. Second, we manually analyzed the missing bugs and investigated the reasons. The results show that the three tools can detect 29 of the 40 studied bugs after annotating, while only 14 bugs are detected before annotating. We also found that type annotations can substantially improve the ability of static type checkers to detect real bugs. A detailed analysis of bugs missed by the checkers shows that: (i) the accuracy of type analysis is challenged when it comes to programs with complicated dynamic features, such as dynamically changing object’s attributes, even with annotations; (ii) the inaccurate type annotations can undermine the ability of static type checkers to detect real bugs; (iii) static type checkers have different checking strategies in some cases, which has an impact on real bug detection. Our study can not only enable developers to better understand static type checking and make better use of them but also guide future research.},
	urldate = {2024-09-13},
	booktitle = {2023 {IEEE}/{ACM} 31st {International} {Conference} on {Program} {Comprehension} ({ICPC})},
	author = {Xu, Wenjie and Chen, Lin and Su, Chenghao and Guo, Yimeng and Li, Yanhui and Zhou, Yuming and Xu, Baowen},
	month = may,
	year = {2023},
	note = {ISSN: 2643-7171},
	keywords = {Annotations, Benchmark testing, bug detection, Computer bugs, Costs, Feature extraction, gradual typing, Maintenance engineering, Python, Runtime, static type checking, type annotation},
	pages = {242--253},
	file = {IEEE Xplore Full Text PDF:/Users/xylix/Zotero/storage/JCA3ZI4E/Xu et al. - 2023 - How Well Static Type Checkers Work with Gradual Ty.pdf:application/pdf},
}

@misc{pyright_type_inference,
	title = {Type {Inference}},
    author={Microsoft},
	url = {https://microsoft.github.io/pyright/#/type-inference},
	urldate = {2024-12-13},
	file = {Type Inference:/Users/xylix/Zotero/storage/M32YMXPZ/pyright.html:text/html},
}

@misc{mypy_type_inference,
	title = {Type inference and type annotations - mypy 1.13.0 documentation},
    author={Jukka Lehtosalo and mypy contributors},
	url = {https://mypy.readthedocs.io/en/stable/type_inference_and_annotations.html},
	urldate = {2024-12-13},
	file = {Type inference and type annotations - mypy 1.13.0 documentation:/Users/xylix/Zotero/storage/3UPRMWGP/type_inference_and_annotations.html:text/html},
}

@inproceedings{jin_where_to_start_2021,
	title = {Where to {Start}: {Studying} {Type} {Annotation} {Practices} in {Python}},
	shorttitle = {Where to {Start}},
	url = {https://ieeexplore.ieee.org/document/9678947/?arnumber=9678947},
	doi = {10.1109/ASE51524.2021.9678947},
	abstract = {Dynamic programming languages have been embracing gradual typing, which supports optional type annotations in source code. Type-annotating a complex and long-lasting codebase is indeed a gradual and expensive process, where two issues have troubled developers. First, there is few guidance about how to implement type annotations due to the existence of non-trivial type practices; second, there is few guidance about which portion of a codebase should be type-annotated first. To address these issues, this paper investigates the patterns of non-trivial type-annotation practices and features of type-annotated code files. Our study detected six patterns of type-annotation practices, which involve recovering and expressing design concerns. Moreover, we revealed three complementary features of type-annotated files. Besides, we implemented a tool for studying optional typing practice. We suggest that: 1) design concerns should be considered to improve type annotation implementation by following at least six patterns; 2) files critical to software architecture could be type-annotated in priority. We believe these guidelines would promote a better type annotation practice for dynamic languages.},
	urldate = {2024-12-12},
	booktitle = {2021 36th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE})},
	author = {Jin, Wuxia and Zhong, Dinghong and Ding, Zifan and Fan, Ming and Liu, Ting},
	month = nov,
	year = {2021},
	note = {ISSN: 2643-1572},
	keywords = {Annotations, Codes, Costs, dynamic languages, Dynamic programming, Feature extraction, Maintenance engineering, Software architecture, type annotation},
	pages = {529--541},
}

@inproceedings{gao_to_type_or_not_2017,
	title = {To {Type} or {Not} to {Type}: {Quantifying} {Detectable} {Bugs} in {JavaScript}},
	shorttitle = {To {Type} or {Not} to {Type}},
	url = {https://ieeexplore.ieee.org/abstract/document/7985711},
	doi = {10.1109/ICSE.2017.75},
	abstract = {JavaScript is growing explosively and is now used in large mature projects even outside the web domain. JavaScript is also a dynamically typed language for which static type systems, notably Facebook's Flow and Microsoft's TypeScript, have been written. What benefits do these static type systems provide? Leveraging JavaScript project histories, we select a fixed bug and check out the code just prior to the fix. We manually add type annotations to the buggy code and test whether Flow and TypeScript report an error on the buggy code, thereby possibly prompting a developer to fix the bug before its public release. We then report the proportion of bugs on which these type systems reported an error. Evaluating static type systems against public bugs, which have survived testing and review, is conservative: it understates their effectiveness at detecting bugs during private development, not to mention their other benefits such as facilitating code search/completion and serving as documentation. Despite this uneven playing field, our central finding is that both static type systems find an important percentage of public bugs: both Flow 0.30 and TypeScript 2.0 successfully detect 15\%!.},
	urldate = {2024-09-12},
	booktitle = {2017 {IEEE}/{ACM} 39th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	author = {Gao, Zheng and Bird, Christian and Barr, Earl T.},
	month = may,
	year = {2017},
	note = {ISSN: 1558-1225},
	keywords = {Computer bugs, Documentation, Facebook, Flow, History, JavaScript, Measurement uncertainty, mining software repositories, Software, static type systems, Surgery, TypeScript},
	pages = {758--769},
	file = {IEEE Xplore Abstract Record:/Users/xylix/Zotero/storage/S4F4XPLT/7985711.html:text/html;IEEE Xplore Full Text PDF:/Users/xylix/Zotero/storage/4PPC74PQ/Gao et al. - 2017 - To Type or Not to Type Quantifying Detectable Bug.pdf:application/pdf},
}

@misc{python_software_foundation_jetbrains_sro_python_nodate,
	title = {Python {Developers} {Survey} 2023 {Results}},
	url = {https://lp.jetbrains.com/python-developers-survey-2023/},
	abstract = {Official Python Developers Survey 2023 Results by Python Software Foundation and JetBrains: more than 25k responses from almost 200 countries.},
	language = {en},
	urldate = {2024-12-06},
	journal = {JetBrains: Developer Tools for Professionals and Teams},
	author = {{Python Software Foundation, JetBrains s.r.o}},
	file = {Snapshot:/Users/xylix/Zotero/storage/8WJZ84UV/python-developers-survey-2023.html:text/html},
}


@misc{jetbrains_type_hinting_pycharm,
	title = {Type hinting in {PyCharm} {\textbar} {PyCharm}},
	url = {https://www.jetbrains.com/help/pycharm/type-hinting-in-product.html},
	language = {en-US},
	urldate = {2024-12-06},
	journal = {PyCharm Help},
	author = {{JetBrains s.r.o}},
	file = {Snapshot:/Users/xylix/Zotero/storage/6VHFXNJA/type-hinting-in-product.html:text/html},
}

@inproceedings{cardelli_typeful_1989,
	title = {Typeful {Programming}},
	url = {https://api.semanticscholar.org/CorpusID:1020405},
	booktitle = {Formal {Description} of {Programming} {Concepts}},
	author = {Cardelli, Luca},
	year = {1989},
	file = {Cardelli - Typeful programming.pdf:/Users/xylix/Zotero/storage/RHPPF3FH/Cardelli - Typeful programming.pdf:application/pdf},
}


@inproceedings{lin_towards_large_scale_2023,
	title = {Towards a {Large}-{Scale} {Empirical} {Study} of {Python} {Static} {Type} {Annotations}},
	url = {https://ieeexplore.ieee.org/document/10123628/?arnumber=10123628},
	doi = {10.1109/SANER56733.2023.00046},
	abstract = {Python, as one of the most popular and important programming languages in the era of data science, has recently introduced a syntax for static type annotations with PEP 484, to improve code maintainability, quality, and readability. However, it is still unknown whether and how static type annotations are used in practical Python projects.This paper presents, to the best of our knowledge, the first and most comprehensive empirical study on the defects, evolution and rectification of static type annotations in Python projects. We first designed and implemented a software prototype dubbed PYSCAN, then used it to scan notable Python projects with diverse domains and sizes and type annotation manners, which add up to 19,478,428 lines of Python code. The empirical results provide interesting findings and insights, such as: 1) we proposed a taxonomy of Python type annotation-related defects, by classifying defects into four categories; 2) we investigated the evolution of type annotation-related defects; and 3) we proposed automatic defect rectification strategies, generating rectification suggestions for 82 out of 110 (74.55\%) defects successfully. We suggest that: 1) Python language designers should clarify the type annotation specification; 2) checking tool builders should improve their tools to suppress false positives; and 3) Python developers should integrate such checking tools into their development workflow to catch type annotation-related defects at an early development stage.We have reported our findings and suggestions to Python language designers, checking tool builders, and Python developers. They have acknowledged us and taken actions based on our suggestions. We believe these guidelines would improve static type annotation practices and benefit the Python ecosystem in general.},
	urldate = {2024-12-05},
	booktitle = {2023 {IEEE} {International} {Conference} on {Software} {Analysis}, {Evolution} and {Reengineering} ({SANER})},
	author = {Lin, Xinrong and Hua, Baojian and Wang, Yang and Pan, Zhizhong},
	month = mar,
	year = {2023},
	note = {ISSN: 2640-7574},
	keywords = {Annotations, Codes, Data science, Ecosystems, Empirical Study, Prototypes, Python, Static Type Annotations, Syntactics, Taxonomy},
	pages = {414--425},
	file = {Full Text PDF:/Users/xylix/Zotero/storage/PD5MUEZ7/Lin et al. - 2023 - Towards a Large-Scale Empirical Study of Python St.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/xylix/Zotero/storage/FY8IVMMJ/10123628.html:text/html},
}

@inproceedings{nanz_comparative_2015,
	title = {A {Comparative} {Study} of {Programming} {Languages} in {Rosetta} {Code}},
	volume = {1},
	url = {https://ieeexplore.ieee.org/document/7194625/?arnumber=7194625},
	doi = {10.1109/ICSE.2015.90},
	abstract = {Sometimes debates on programming languages are more religious than scientific. Questions about which language is more succinct or efficient, or makes developers more productive are discussed with fervor, and their answers are too often based on anecdotes and unsubstantiated beliefs. In this study, we use the largely untapped research potential of Rosetta Code, a code repository of solutions to common programming tasks in various languages, which offers a large data set for analysis. Our study is based on 7'087 solution programs corresponding to 745 tasks in 8 widely used languages representing the major programming paradigms (procedural: C and Go, object-oriented: C\# and Java, functional: F\# and Haskell, scripting: Python and Ruby). Our statistical analysis reveals, most notably, that: functional and scripting languages are more concise than procedural and object-oriented languages, C is hard to beat when it comes to raw speed on large inputs, but performance differences over inputs of moderate size are less pronounced and allow even interpreted languages to be competitive, compiled strongly-typed languages, where more defects can be caught at compile time, are less prone to runtime failures than interpreted or weakly-typed languages. We discuss implications of these results for developers, language designers, and educators.},
	urldate = {2024-12-05},
	booktitle = {2015 {IEEE}/{ACM} 37th {IEEE} {International} {Conference} on {Software} {Engineering}},
	author = {Nanz, Sebastian and Furia, Carlo A.},
	month = may,
	year = {2015},
	note = {ISSN: 1558-1225},
	keywords = {Indexes, Java, Programming, Runtime, Standards, Statistical analysis},
	pages = {778--788},
	file = {Full Text PDF:/Users/xylix/Zotero/storage/NIUQUW2M/Nanz and Furia - 2015 - A Comparative Study of Programming Languages in Ro.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/xylix/Zotero/storage/SLQ54NUI/7194625.html:text/html},
}

@article{siek_refined_gradual_2015,
	title = {Refined {Criteria} for {Gradual} {Typing}},
	volume = {32},
	copyright = {Creative Commons Attribution 3.0 Unported license, info:eu-repo/semantics/openAccess},
	issn = {1868-8969},
	url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.SNAPL.2015.274},
	doi = {10.4230/LIPICS.SNAPL.2015.274},
	abstract = {Siek and Taha [2006] coined the term gradual typing to describe a theory for integrating static and dynamic typing within a single language that 1) puts the programmer in control of which regions of code are statically or dynamically typed and 2) enables the gradual evolution of code between the two typing disciplines. Since 2006, the term gradual typing has become quite popular but its meaning has become diluted to encompass anything related to the integration of static and dynamic typing. This dilution is partly the fault of the original paper, which provided an incomplete formal characterization of what it means to be gradually typed. In this paper we draw a crisp line in the sand that includes a new formal property, named the gradual guarantee, that relates the behavior of programs that diﬀer only with respect to their type annotations. We argue that the gradual guarantee provides important guidance for designers of gradually typed languages. We survey the gradual typing literature, critiquing designs in light of the gradual guarantee. We also report on a mechanized proof that the gradual guarantee holds for the Gradually Typed Lambda Calculus.},
	language = {en},
	urldate = {2024-11-21},
	journal = {LIPIcs, Volume 32, SNAPL 2015},
	author = {Siek, Jeremy G. and Vitousek, Michael M. and Cimini, Matteo and Boyland, John Tang},
	collaborator = {Ball, Thomas and Bodik, Rastislav and Krishnamurthi, Shriram and Lerner, Benjamin S. and Morrisett, Greg},
	year = {2015},
	note = {Artwork Size: 20 pages, 585233 bytes
ISBN: 9783939897804
Medium: application/pdf
Publisher: Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
	keywords = {dynamic languages, gradual typing, semantics, type systems},
	pages = {274--293},
	file = {Siek et al. - 2015 - Refined Criteria for Gradual Typing.pdf:/Users/xylix/Zotero/storage/CVL4GHZN/Siek et al. - 2015 - Refined Criteria for Gradual Typing.pdf:application/pdf},
}

@inproceedings{rak-amnouykit_taleoftwo_2020,
	address = {Virtual USA},
	title = {Python 3 types in the wild: a tale of two type systems},
	isbn = {978-1-4503-8175-8},
	shorttitle = {Python 3 types in the wild},
	url = {https://dl.acm.org/doi/10.1145/3426422.3426981},
	doi = {10.1145/3426422.3426981},
	abstract = {Python 3 is a highly dynamic language, but it has introduced a syntax for expressing types with PEP484. This paper explores how developers use these type annotations, the type system semantics provided by type checking and inference tools, and the performance of these tools. We evaluate the types and tools on a corpus of public GitHub repositories. We review MyPy and PyType, two canonical static type checking and inference tools, and their distinct approaches to type analysis. We then address three research questions: (i) How often and in what ways do developers use Python 3 types? (ii) Which type errors do developers make? (iii) How do type errors from different tools compare? Surprisingly, when developers use static types, the code rarely type-checks with either of the tools. MyPy and PyType exhibit false positives, due to their static nature, but also flag many useful errors in our corpus. Lastly, MyPy and PyType embody two distinct type systems, flagging different errors in many cases. Understanding the usage of Python types can help guide tool-builders and researchers. Understanding the performance of popular tools can help increase the adoption of static types and tools by practitioners, ultimately leading to more correct and more robust Python code.},
	language = {en},
	urldate = {2024-09-02},
	booktitle = {Proceedings of the 16th {ACM} {SIGPLAN} {International} {Symposium} on {Dynamic} {Languages}},
	publisher = {ACM},
	author = {Rak-amnouykit, Ingkarat and McCrevan, Daniel and Milanova, Ana and Hirzel, Martin and Dolby, Julian},
	month = nov,
	year = {2020},
	pages = {57--70},
	file = {Rak-amnouykit et al. - 2020 - Python 3 types in the wild a tale of two type sys.pdf:/Users/xylix/Zotero/storage/2AHGQ5WB/Rak-amnouykit et al. - 2020 - Python 3 types in the wild a tale of two type sys.pdf:application/pdf},
}

@misc{pydanticdev_welcome_nodate,
	title = {Welcome to {Pydantic} - {Pydantic}},
	url = {https://docs.pydantic.dev/latest/},
	abstract = {Data validation using Python type hints},
	language = {en},
	urldate = {2024-10-30},
	author = {{pydantic.dev}},
	file = {Snapshot:/Users/xylix/Zotero/storage/GJEYEKMW/latest.html:text/html},
}   

@misc{python_typing,
	title = {typing — {Support} for type hints},
    author = "Python Software Foundation",
	url = {https://docs.python.org/3/library/typing.html},
	abstract = {Source code: Lib/typing.py This module provides runtime support for type hints. Consider the function below: The function surface\_area\_of\_cube takes an argument expected to be an instance of float,...},
	language = {en},
	urldate = {2024-10-30},
	journal = {Python documentation},
	file = {Snapshot:/Users/xylix/Zotero/storage/S88EW55K/typing.html:text/html},
}

@inproceedings{di_grazia_evolution_2022,
	address = {Singapore Singapore},
	title = {The evolution of type annotations in python: an empirical study},
	shorttitle = {The evolution of type annotations in python},
	url = {https://dl.acm.org/doi/10.1145/3540250.3549114},
	doi = {10.1145/3540250.3549114},
	abstract = {Type annotations and gradual type checkers attempt to reveal errors and facilitate maintenance in dynamically typed programming languages. Despite the availability of these features and tools, it is currently unclear how quickly developers are adopting them, what strategies they follow when doing so, and whether adding type annotations reveals more type errors. This paper presents the first large-scale empirical study of the evolution of type annotations and type errors in Python. The study is based on an analysis of 1,414,936 type annotation changes, which we extract from 1,123,393 commits among 9,655 projects. Our results show that (i) type annotations are getting more popular, and once added, often remain unchanged in the projects for a long time, (ii) projects follow three evolution patterns for type annotation usage ś regular annotation, type sprints, and occasional uses ś and that the used pattern correlates with the number of contributors, (iii) more type annotations help find more type errors (0.704 correlation), but nevertheless, many commits (78.3\%) are committed despite having such errors. Our findings show that better developer training and automated techniques for adding type annotations are needed, as most code still remains unannotated, and they call for a better integration of gradual type checking into the development process.},
	language = {en},
	urldate = {2024-09-02},
	booktitle = {Proceedings of the 30th {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Di Grazia, Luca and Pradel, Michael},
	month = nov,
	year = {2022},
	pages = {209--220},
	file = {Di Grazia and Pradel - 2022 - The evolution of type annotations in python an em.pdf:/Users/xylix/Zotero/storage/3332KWX7/Di Grazia and Pradel - 2022 - The evolution of type annotations in python an em.pdf:application/pdf},
}

@article{ray_codequality_2014,
	title = {A {Large} {Scale} {Study} of {Programming} {Languages} and {Code} {Quality} in {Github}},
	doi = {10.1145/2635868.2635922},
	abstract = {What is the effect of programming languages on software quality? This question has been a topic of much debate for a very long time. In this study, we gather a very large data set from GitHub (729 projects, 80 Million SLOC, 29,000 authors, 1.5 million commits, in 17 languages) in an attempt to shed some empirical light on this question. This reasonably large sample size allows us to use a mixed-methods approach, combining multiple regression modeling with visualization and text analytics, to study the effect of language features such as static v.s. dynamic typing, strong v.s. weak typing on software quality. By triangulating ﬁndings from different methods, and controlling for confounding effects such as team size, project size, and project history, we report that language design does have a signiﬁcant, but modest effect on software quality. Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also ﬁnd that functional languages are somewhat better than procedural languages. It is worth noting that these modest effects arising from language design are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader that even these modest effects might quite possibly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.},
	language = {en},
	author = {Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
	month = nov,
	year = {2014},
	file = {Ray et al. - A Large Scale Study of Programming Languages and C.pdf:/Users/xylix/Zotero/storage/HZBYBHBD/Ray et al. - A Large Scale Study of Programming Languages and C.pdf:application/pdf},
}

@article{codequality_reproudction_2019,
	title = {On the {Impact} of {Programming} {Languages} on {Code} {Quality}: {A} {Reproduction} {Study}},
	volume = {41},
	issn = {0164-0925, 1558-4593},
	shorttitle = {On the {Impact} of {Programming} {Languages} on {Code} {Quality}},
	url = {https://dl.acm.org/doi/10.1145/3340571},
	doi = {10.1145/3340571},
	abstract = {In a 2014 article, Ray, Posnett, Devanbu, and Filkov claimed to have uncovered a statistically significant association between 11 programming languages and software defects in 729 projects hosted on GitHub. Specifically, their work answered four research questions relating to software defects and programming languages. With data and code provided by the authors, the present article first attempts to conduct an experimental repetition of the original study. The repetition is only partially successful, due to missing code and issues with the classification of languages. The second part of this work focuses on their main claim, the association between bugs and languages, and performs a complete, independent reanalysis of the data and of the statistical modeling steps undertaken by Ray et al. in 2014. This reanalysis uncovers a number of serious flaws that reduce the number of languages with an association with defects down from 11 to only 4. Moreover, the practical effect size is exceedingly small. These results thus undermine the conclusions of the original study. Correcting the record is important, as many subsequent works have cited the 2014 article and have asserted, without evidence, a causal link between the choice of programming language for a given task and the number of software defects. Causation is not supported by the data at hand; and, in our opinion, even after fixing the methodological flaws we uncovered, too many unaccounted sources of bias remain to hope for a meaningful comparison of bug rates across languages.},
	language = {en},
	number = {4},
	urldate = {2024-09-12},
	journal = {ACM Transactions on Programming Languages and Systems},
	author = {Berger, Emery D. and Hollenbeck, Celeste and Maj, Petr and Vitek, Olga and Vitek, Jan},
	month = dec,
	year = {2019},
	pages = {1--24},
	file = {Berger et al. - 2019 - On the Impact of Programming Languages on Code Qua.pdf:/Users/xylix/Zotero/storage/NDJ7C8VG/Berger et al. - 2019 - On the Impact of Programming Languages on Code Qua.pdf:application/pdf},
}

@article{khan_empirical_2022,
	title = {An {Empirical} {Study} of {Type}-{Related} {Defects} in {Python} {Projects}},
	volume = {48},
	issn = {1939-3520},
	url = {https://ieeexplore.ieee.org/document/9436020/?arnumber=9436020},
	doi = {10.1109/TSE.2021.3082068},
	number = {8},
	urldate = {2024-09-09},
	journal = {IEEE Transactions on Software Engineering},
	author = {Khan, Faizan and Chen, Boqi and Varro, Daniel and McIntosh, Shane},
	month = aug,
	year = {2022},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Python, Annotations, dynamic type systems, Ecosystems, empirical study, Software defects, Software measurement, Software systems, static type checkers, Task analysis, Tools},
	pages = {3145--3158},
	file = {IEEE Xplore Abstract Record:/Users/xylix/Zotero/storage/QQ58BNSK/9436020.html:text/html;IEEE Xplore Full Text PDF:/Users/xylix/Zotero/storage/FPNQUXFS/Khan et al. - 2022 - An Empirical Study of Type-Related Defects in Pyth.pdf:application/pdf},
}

@misc{pep_484,
	title = {{PEP} 484 – {Type} {Hints} {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0484/},
	abstract = {PEP 3107 introduced syntax for function annotations, but the semantics were deliberately left undefined.  There has now been enough 3rd party usage for static type analysis that the community would benefit from a standard vocabulary and baseline tools w...},
	language = {en},
	urldate = {2024-10-22},
	journal = {Python Enhancement Proposals (PEPs)},
	author = {{Guido van Rossum, Jukka Lehtosalo, Łukasz Langa}},
	month = sep,
	year = {2014},
	file = {Snapshot:/Users/xylix/Zotero/storage/8IL72DYT/pep-0484.html:text/html},
}

@INBOOK{programming_langs,
	address = {London},
	series = {Undergraduate {Topics} in {Computer} {Science}},
	title = {Programming {Languages}: {Principles} and {Paradigms}},
	copyright = {https://www.springernature.com/gp/researchers/text-and-data-mining},
	shorttitle = {Programming {Languages}},
	url = {https://link.springer.com/10.1007/978-1-84882-914-5},
	language = {en},
	publisher = {Springer London},
	author = {Gabbrielli, Maurizio and Martini, Simone},
	year = {2010},
	doi = {10.1007/978-1-84882-914-5},
    PAGES = "197-262",
}


@TECHREPORT{erkio01,
  AUTHOR  = "Erkiö, H. and Mäkelä, M. and Nykänen, M. and Verkamo, I.",
  TITLE   = "Opinnäytetyän ulkoasun malli.",
  INSTITUTION = "Tietojenkäsittelyopin laitos",
  YEAR        = 2001,
  TYPE        = "Tieteellisen kirjoittamisen kurssiin
                 liittyvä julkaisematon moniste",
  ADDRESS     = "Helsinki"
  }



@ARTICLE{crowdenetal79,
  AUTHOR  = "Crowder, H. and Dembo, R.S. and Mulvey, J.M.",
  TITLE   = "On reporting computational experiments
             with mathematical software",
  JOURNAL = "{ACM} Transactions on Mathematical Software",
  YEAR    = 1979,
  VOLUME  = 5,
  NUMBER  = 2,
  PAGES   = "193--203"
  }

@INPROCEEDINGS{dantowsley90,
  AUTHOR       = "Dan, A. and Towsley, D.",
  TITLE        = "An approximate analysis of the {LRU} and {FIFO}
                  buffer replacement schemes",
  BOOKTITLE    = "Proc. {ACM} Conf.\ Measurement and
                  Modeling of Computer Systems",
  YEAR         = 1990,
  PAGES        = "143--152",
  ADDRESS      = "Boulder, Colorado, {USA}",
  MONTH        = may
  }

@TECHREPORT{erkio94,
  AUTHOR      = "Erkiö, H.",
  TITLE   = "Opinnäytetyän ulkoasun malli.",
  INSTITUTION = "Tietojenkäsittelyopin laitos",
  YEAR        = 1994,
  TYPE        = "Tieteellisen kirjoittamisen kurssiin
                 liittyvä julkaisematon moniste",
  ADDRESS     = "Helsinki"
  }

@TECHREPORT{erkiomakela96,
  AUTHOR      = "Erkiö, H. and Mäkelä, M.",
  TITLE       = "Opinnäytetyän ulkoasun malli",
  INSTITUTION = "Tietojenkäsittelytieteen laitos",
  YEAR        = 1996,
  TYPE        = "Tieteellisen kirjoittamisen kurssiin
                 liittyvä julkaisematon moniste",
  ADDRESS     = "Helsinki"
  }

@BOOK{fogelbergetal89,
  AUTHOR    = "Fogelberg, P. and Herranen, M. and Sinikara, K.",
  TITLE     = "Tuumasta toimeen, tutkielman tekijän opas",
  PUBLISHER = "Yliopistopaino",
  YEAR      = 1989,
  ADDRESS   = "Helsinki"
  }

@INCOLLECTION{gannonetal89,
  AUTHOR    = "Gannon, D. and others",
  TITLE     = "Programming environments for parallel algorithms",
  BOOKTITLE = "Parallel and Distributed Algorithms",
  YEAR      = 1989,
  EDITOR    = "M. Cosnard and others",
  publisher    = "North-Holland",
  PAGES     = "101--108"
  }


@BOOK{grimm87,
 AUTHOR    = "Grimm, S. S.",
  TITLE     = "How to write computer documentation for users",
  PUBLISHER = "Van Nostrand Reinhold Co.",
  YEAR      = 1987,
  ADDRESS   = "New York"
  }

@BOOK{harkinsplung82,
  EDITOR    = "Harkins, C. and Plung, D. L.",
  TITLE     = "A guide for writing better technical papers",
  PUBLISHER = "IEEE Press",
  YEAR      = 1982}

@TECHREPORT{julkohj81,
  AUTHOR      = "{Helsingin yliopisto}",
  TITLE       = "Julkaisusarjoja ja opinnäytteiden tiivistelmiä
                 koskevat ohjeet ja suositukset",
  YEAR        = 1981,
  TYPE        = "Helsingin yliopiston kirjastolaitoksen julkaisu {A 3}",
  ADDRESS     = "Helsinki"
  }




@WWW-MISC{kilpelainen00,
  AUTHOR       = "Kilpeläinen, P.",
  TITLE        = "{WWW}-lähteisiin viittaaminen tutkielmatekstissä",
  URL          = "http://www.cs.helsinki.fi/u/kilpelai/TiKi/wwwlahteet.html",
  YEAR         =  2000,
  TYPE        = "Tieteellisen kirjoittamisen kurssiin
                 liittyvä julkaisematon moniste",
  VALID        =  "19.1.2000"
  }

@ARTICLE{smith78a,
  AUTHOR  = "Smith, A. J.",
  TITLE   = "Sequentiality and prefetching in database systems",
  JOURNAL = "{ACM} Transactions on Database Systems",
  YEAR    = 1978,
  VOLUME  = 3,
  NUMBER  = 3,
  PAGES   = "223--247"
  }

@ARTICLE{smith78b,
  AUTHOR  = "Smith, A. J.",
  TITLE   = "Sequential program prefetching in memory hierarchies",
  JOURNAL = "Computer",
  YEAR    = 1978,
  VOLUME  = 11,
  NUMBER  = 11,
  PAGES   = "7--21"
  }

@TECHREPORT{verkamo92,
  AUTHOR      = "Verkamo, A. I.",
  TITLE       = "Opinnäytetyän ulkoasun malli",
  INSTITUTION = "Tietojenkäsittelyopin laitos",
  YEAR        = 1992,
  TYPE        = "Tieteellisen kirjoittamisen kurssiin
                 liittyvä julkaisematon moniste",
  ADDRESS     = "Helsinki"
  }

@ARTICLE{abiteboul,

  AUTHOR  = "Abiteboul, S. and Quass, D. and McHugh, J. and
             Widom, J. and Wiener, J.L.",
  TITLE   = "The Lorel query language for semistructured data",
  JOURNAL = "International Journal on Digital Libraries",
  YEAR    = 1997,
  VOLUME  = 1,
  NUMBER  = 1,
  PAGES   = "68-88",
  NOTE    = "[
             \url{http://link.springer.de/
                  link/service/journals/00799/
                  bibs/7001001/70010068.htm},
             18.1.2000]"
}


@misc{bray,
  AUTHOR = "Bray, T. and Paoli, J. and Sperberg-McQueen, C.M.",
  TITLE  = "{Extensible Markup Language {XML} 1.0. W3C Recommendation 10-February-1998}",
  howpublished    = "[\url{http://www.w3.org/TR/1998/REC-xml-19980210}, 02.11.2016]"
}

@ARTICLE{dietinger,

  AUTHOR  = "Dietinger, T. and others",
  TITLE   = "{Dynamic Background Libraries - New Developments in
             Distance Education Using {HIKS} {Hierarchical Interactive
             Knowledge System}}",
  JOURNAL = "Journal of Universal Computer Science",
  YEAR    = 1999,
  VOLUME  = 5,
  NUMBER  = 1,
  NOTE    = "[\url{http://www.iicm.edu/
                  jucs_5_1/dynamic_background_libraries_new},
              18.1.2000]"
}

